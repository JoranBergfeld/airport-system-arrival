name: Prepare the code is ready for release

on:
  push:
    branches:
      - main

env:
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          repositories: '[{ "id": "nexus", "url": "${{ secrets.NEXUS_URL }}" }]'
          servers: '[{ "id": "nexus", "username": "${{ secrets.NEXUS_USERNAME }}", "password": "${{ secrets.NEXUS_PASSWORD }}" }]'

      - name: Setup GitHub Actions to commit to the repository
        run: git config --global user.email "<>" && git config --global user.name "GitHub Actions"

      #- name: Prepare release
      #  run: mvn release:prepare -Dresume=false

      - name: Obtain version from pom
        id: obtain-version
        run: echo "POM_RELEASE_VERSION={mvn help:evaluate -Dexpression=project.version -q -DforceStdout}" >> "$GITHUB_OUTPUT"

      - name: Log the pom version
        env:
          POM_RELEASE_VERSION: ${{ steps.obtain-version.outputs.POM_RELEASE_VERSION }}
        run: echo "The pom version is $POM_RELEASE_VERSION"

      - name: Obtain non-snapshot version from previous step
        id: determine-version
        env:
          POM_RELEASE_VERSION: ${{ steps.obtain-version.outputs.POM_RELEASE_VERSION }}
        run: echo "RELEASE_VERSION={echo $POM_RELEASE_VERSION | sed 's/-SNAPSHOT//'}" >> "$GITHUB_OUTPUT"

      - name: Log the version
        env:
          RELEASE_VERSION: ${{ steps.determine-version.outputs.RELEASE_VERSION }}
        run: echo "The version is $RELEASE_VERSION"

      #- name: Build and push arrival container
      #  run: mvn -DskipTests -Dspring-boot.build-image.imageName=arrival:${{ steps.determine-version.outputs.RELEASE_VERSION }} spring-boot:build-image

      #- name: Push the release tag
      #  run: git push origin ${{ github.ref_name }}
